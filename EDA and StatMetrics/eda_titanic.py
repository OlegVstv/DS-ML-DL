# -*- coding: utf-8 -*-
"""EDA_Titanic.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16jaRLxULHv-xcP8E00UicPuSHdLazHjh

# 1. Data Collection and Understanding

Information links:
*   Link to Kaggle competition  [Titanic - Machine Learning from Disaster](https://www.kaggle.com/competitions/titanic/overview)
*   Машинное обучение (Дмитрий Макаров) [YouTube](https://www.youtube.com/@MachineLearning101) [сайт](https://www.dmitrymakarov.ru/)
*Датасет Титаник (Дмитрий Макаров)  [описательная статистика](https://www.dmitrymakarov.ru/data-analysis/eda-04/)
*Tutorial 11-Exploratory Data Analysis(EDA) of Titanic dataset [YouTube](https://www.youtube.com/watch?v=Ea_KAcdv1vs&t=485s)
*   My current coperition score: 0.80143 / position: 720

**a) Loading the data (Загружаем данные)**
"""

import pandas as pd
from google.colab import drive
train_titanic = pd.read_csv("/content/drive/MyDrive/Colab Notebooks/datasets/titanic_wreck_data/train.csv")
test_titanic = pd.read_csv("/content/drive/MyDrive/Colab Notebooks/datasets/titanic_wreck_data/test.csv")

"""**b) Dataset primary study (Первоначальное изучение данных)**

* Dimension (Размерность данных)
* Data brief review (Просмотр данных)
* Columns, its data types, missing data (Столбцы, их тип данных, отсутствующие данные)
* Column`s meaning in fact (Фактическое значение столбцов)

"""

train_titanic.shape
train_titanic.head(10)
train_titanic.tail(3)
train_titanic.sample(5)
train_titanic.info()
train_titanic.Pclass.unique()
train_titanic.Name.value_counts().sum()
train_titanic.Sex.unique()
train_titanic.Age.describe()
train_titanic.Age.isnull().sum()
train_titanic.SibSp.unique()
train_titanic.Parch.unique()
train_titanic.Ticket.unique()
train_titanic.Fare.unique()
train_titanic.Cabin.unique()
train_df.isnull().sum()

# Размерность данных: (891, 12)
#   Column        NaN Dtype
#--  ------       --------------  -----
# 0   PassengerId  0    int64
# 1   Survived     0    int64     categorical [0, 1] - *target col*
# 2   Pclass       0    int64     Passenger class / categorical [3, 1, 2]: 1, 2, 3 - class of travel confort
# 3   Name         0   object     all the 891 name are unique
# 4   Sex          0   object     categorical ['male', 'female']
# 5   Age          177 float64    numeric
# 6   SibSp        0   int64      number of siblings (брат или сестра) and/or spouse (супруг/а) / categorical [1, 0, 3, 4, 2, 5, 8] - value 6 and 7 are missing
# 7   Parch        0   int64      number of parents and/or children / categorical [0, 1, 2, 5, 3, 4, 6]
# 8   Ticket       0   object     all values unique - related to Cabin or not? It is not really clear
# 9   Fare         0   float64    fare for trip - I see trip fare related to Pclass
# 10  Cabin        687 object     all values unique - related to Ticket ! accomodation on the ship -> Survived (1/3 information is available only)
# 11  Embarked     2   object     sea port of embarking / categorical ['S', 'C', 'Q'] - related to Cabin or not? It is not really clear (C = Cherbourg, Q = Queenstown, S = Southampton)

# dtypes: float64(2), int64(5), object(5)
# memory usage: 83.7+ KB

"""**c) Univariate analysis (Одномерный анализ)**

*   Analysis of each column - searching for Features (Анализ столцов с целью выявления - признаков)
*   Checking how certain column could be connected to labeled Data
*   Matplotlib.pyplot [List of named colors](https://matplotlib.org/stable/gallery/color/named_colors.html)




"""

import seaborn as sns
import matplotlib.pyplot as plt

train_titanic.Survived.value_counts()   # количество по каждому уникальному значению
train_titanic.Survived.value_counts(normalize=True).round(2)

# 1   Survived: categorical [0, 1] - labeled data
#     Not Survived: [0] = 549 (0.62)
#     Survived:     [1] = 342 (0.38)

colors = ['skyblue', 'lightcoral','lightseagreen']
# sns.countplot(x = 'Survived', data = train_titanic) # making the calculation by its own
sns.barplot(x = train_titanic.Survived, y = train_titanic.Survived.value_counts(), palette=colors)

train_titanic.Pclass.value_counts()
train_titanic.Pclass.value_counts(normalize=True).round(2)

# 2   Pclass: categorical [3, 1, 2] - supply certain accomodation on the ship -> Survived
#       Class 1: 216 (0.55) passengers
#       Cladd 2: 184 (0.24) passengers
#       Class 3: 491 (0.21) passengers

colors = ['skyblue', 'lightcoral','lightseagreen']

# sns.countplot(x = 'Pclass', data = train_titanic,palette=colors)
pclass_counts = train_titanic.Pclass.value_counts()
sns.barplot(x = pclass_counts.index, y = pclass_counts.values, palette=colors)

train_titanic.Sex.value_counts()
train_titanic.Sex.value_counts(normalize=True).round(2)

# 4   Sex: categorical ['male', 'female']
#       male:  577 (0.65)
#       female 314 (0.35)

# sns.countplot(x = 'Sex', data = train_titanic, palette=colors)
gender_counts = train_titanic.Sex.value_counts()
sns.barplot(x = gender_counts.index, y = gender_counts.values, palette=colors)

"""**Histogram and box-and-wisker plot / Гистограмма и "Ящик с усами"**"""

train_titanic.Age.describe()
# 5   Age: numeric  float64  (177 - missing age values)
#       min: 0.42 years
#       max: 80   years
fig, (ax_box, ax_hist) = plt.subplots(2, # две строки в сетке подграфиков,
                                    sharex = True, # единая шкала по оси x и
                                    gridspec_kw = {'height_ratios': (.15, .85)}) # пропорция 15/85 по высоте
# затем создадим графики, указав через параметр ax, в какой подграфик поместить каждый из них
sns.boxplot(x = train_titanic.Age, ax = ax_box)
sns.histplot(x = train_titanic.Age, ax = ax_hist, bins = 50, kde = True)

# добавим подписи к каждому из графиков через метод .set()
ax_box.set(xlabel = 'box-and-wisker plot') # пустые кавычки удаляют подпись (!)
ax_hist.set(xlabel = 'Age distribution')
ax_hist.set(ylabel = 'count')

# выведем результат
plt.show()
#sns.histplot(data = train_titanic, x = 'Age', bins = 50, kde = True);
print('Age mean value: ',train_titanic.Age.mean().round(2),'\nAge median value: ',train_titanic.Age.median())

#train_titanic.Age = test_titanic.Age
print(len(train_titanic.Age))
print(len(test_titanic.Age))
train_and_test_Age = train_titanic.Age
train_and_test_Age = train_and_test_Age.add(test_titanic.Age)
len(train_and_test_Age)

"""**Insights, further deep investigation ideas / Открытия, идеи для дальнейшего исследования**

*   Accomodation on the ship could be critical to survive!!!
*   *Survived* in each *Pclass*
*   Survivors by gender *Sex*
*   *Age* - 177 missing age values. How to handle?
*   *Age* - make distribution of ages values who survived and not at one same plot to compare
"""

fig, axs = plt.subplots(1, 2, figsize=(10, 5))
# Create the first countplot(ax0)
sns.countplot(x = 'SibSp', data = train_titanic, ax=axs[0])
axs[0].set_title('Siblings and/or Spouse')
# Create the second countplot(ax1)
sns.countplot(x = 'Parch', data = train_titanic, ax=axs[1])
axs[1].set_title('Parents and/or Children')
# train_titanic.SibSp.value_counts(normalize=True)
# train_titanic.Parch.value_counts(normalize=True)
plt.show()

"""# 2. Preprocessing of Feature columns data (Преподготовка данных в столбцах- признаках)

*   Формирование датасета для дальнейшего анализа зависимостей
    - выявление стобцов-признаков
    - если столбцы-признаки имеют пробелы данных - заполняем их
    - удаление "неинтересных" для анализа столбцов
*   Feature Engineering (Инженеринг признаков)

*   Visualization of missing data by using Heatmap (seaborn)
*   removing unnecessary data for prediction goal (clearning)
*   filling columns (feature) with the data (imputation)
"""

import seaborn as sns

sns.heatmap(train_titanic.isnull(),yticklabels=False,cbar=False,cmap="cividis")

# Taking into consideration above there are 3 columns having missing values - Cabin, Age and Embarked
cabin_misdata_ratio = train_titanic.Cabin.isnull().sum() / len(train_titanic.Cabin)
cabin_misdata_ratio.round(2)
# cabin_misdata_ratio = 0.77 - Too much information is missing. Hence, this column should be removed

age_misdata_ratio = train_titanic.Age.isnull().sum() / len(train_titanic.Age)
age_misdata_ratio.round(2)
# age_misdata_ratio = 0.20 - 20% of data is missing. 'Age' could be interesting Feature to keep it for prediction.

"""a) Data Imputation"""

# Imputing the data to Age column (feature) by adding median values
train_titanic.Age.fillna(train_titanic.Age.median(), inplace = True)
# Imputing the data to Embarked by filling 'S' - Southhampton
train_titanic.Embarked.fillna('S', inplace = True)

"""b) Removing data"""

# Remove Cabin column
train_titanic.drop(labels = 'Cabin', axis = 1, inplace = True)

# Check the result
train_titanic.isnull().sum().sum()

sns.heatmap(train_titanic.isnull(),yticklabels=False,cbar=False,cmap="cividis")



"""# 3. Dependency search (Поиск зависимостей)

*   Bivariate analysis - relationship in between pair of features (двухмерный анализ)
    - Explore relationships between pairs of features using techniques like scatter plots and correlation matrices. Identify potential relationships between variables that might be relevant for your analysis
*   Multivariate analysis as an option (многомерный анализ)
    - principal component analysis (PCA) or dimensionality reduction


"""



"""# ML-model building (Построение модели Машинного обучения)"""

